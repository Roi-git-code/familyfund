<!-- views/partials/modals/categoryPercentageModal.ejs -->
<div class="modal fade" id="percentModal" tabindex="-1" aria-labelledby="percentModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg rounded-3">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="percentModalLabel">
          <i class="bi bi-sliders me-2"></i> Update Category Percentages
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <div id="percentFlashContainer"></div>
        <form id="updatePercentForm">
          <div class="row g-3">
            <% categories.forEach(category => { %>
              <div class="col-md-6">
                <div class="input-group">
                  <span class="input-group-text w-50"><%= category.name %></span>
                  <!-- NOTE: use category.key as input key so server gets "investment", "emergency", etc -->
                  <input type="number"
                         name="percentages[<%= category.key %>]"
                         class="form-control"
                         min="0" max="100"
                         placeholder="%"
                         required
                         step="0.01"
                         value="<%= (category.percent != null) ? category.percent : '' %>">
                  <span class="input-group-text">%</span>
                </div>
              </div>
            <% }) %>
          </div>

          <div class="mt-4">
            <label class="fw-semibold">Total Percentage:</label>
            <div class="progress" style="height: 25px;">
              <div id="percentProgress"
                   class="progress-bar bg-success fw-bold"
                   role="progressbar"
                   style="width: 0%;"
                   aria-valuenow="0"
                   aria-valuemin="0"
                   aria-valuemax="100">0%</div>
            </div>
            <small class="text-muted">Ensure total adds up to exactly 100%.</small>
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="bi bi-x-circle me-1"></i> Cancel
        </button>
        <button type="submit" form="updatePercentForm" class="btn btn-primary">
          <i class="bi bi-save me-1"></i> Save Changes
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const percentForm = document.getElementById("updatePercentForm");
  const flashContainer = document.getElementById("percentFlashContainer");
  const progressBar = document.getElementById("percentProgress");

  function updateProgress() {
    let total = 0;
    percentForm.querySelectorAll("input[type='number']").forEach(input => {
      total += parseFloat(input.value) || 0;
    });
    total = Math.min(total, 100);
    progressBar.style.width = total + "%";
    progressBar.setAttribute("aria-valuenow", total);
    progressBar.textContent = total + "%";

    progressBar.classList.remove("bg-success","bg-warning","bg-danger");
    if (total === 100) progressBar.classList.add("bg-success");
    else if (total < 100) progressBar.classList.add("bg-warning");
    else progressBar.classList.add("bg-danger");
  }

  percentForm.querySelectorAll("input[type='number']").forEach(input => {
    input.addEventListener("input", updateProgress);
  });
  updateProgress();

  percentForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    let total = 0;
    percentForm.querySelectorAll("input[type='number']").forEach(input => total += parseFloat(input.value) || 0);
    if (Math.round(total * 100) / 100 !== 100) {
      flashContainer.innerHTML = `<div class="alert alert-danger">Total percentages must equal 100%. Currently: ${total}%</div>`;
      return;
    }

    // Build nested object structure before sending
    const formData = new FormData(percentForm);
    const payload = { percentages: {} };
    for (const [k, v] of formData.entries()) {
      // keys are like "percentages[investment]"
      const m = k.match(/^percentages\[(.+)\]$/);
      if (m) payload.percentages[m[1]] = v;
    }

    try {
      const res = await fetch("/funds/categories/update", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      const json = await res.json();
      if (json.success) {
        flashContainer.innerHTML = `<div class="alert alert-success">${json.success}</div>`;

        // refresh the breakdown table via JSON
        const breakdownRes = await fetch("/funds/categories/breakdown");
        const body = await breakdownRes.json();
        const breakdown = body.breakdown || [];
        const tableContainer = document.getElementById("fundBreakdownTable");
        if (breakdown.length) {
          tableContainer.innerHTML = `
            <table class="table table-bordered align-middle text-center mb-0">
              <thead class="table-light">
                <tr><th>Category</th><th>Percentage (%)</th><th>Allocated Amount</th></tr>
              </thead>
              <tbody>
                ${breakdown.map(item => `
                  <tr>
                    <td class="fw-semibold">${item.label}</td>
                    <td>${item.percent}</td>
                    <td>${item.amount}</td>
                  </tr>`).join('')}
              </tbody>
            </table>`;
        } else {
          tableContainer.innerHTML = `<div class="alert alert-info mb-0">No breakdown data available.</div>`;
        }
      } else {
        flashContainer.innerHTML = `<div class="alert alert-danger">${json.error || 'Update failed'}</div>`;
      }
    } catch (err) {
      console.error('Update error:', err);
      flashContainer.innerHTML = `<div class="alert alert-danger">Unexpected error occurred.</div>`;
    }
  });
});
</script>
